{
  "address": "0xaba66801a23458F6Ff888c03E0453b747c1fA61B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultChefAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_masterchefAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniRouterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_wantAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_earnedAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_earnedToWmaticPath",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_uniRouterAddress",
          "type": "address"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buyBackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBackRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controllerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dgngAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earnedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToDgngPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken0Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToToken1Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedToWmaticPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMaxTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEarnBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchefAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_govAddress",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_controllerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyBackRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippageFactor",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_uniRouterAddress",
          "type": "address"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageFactorUL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "token0ToEarnedPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "token1ToEarnedPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpanic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultChefAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultSharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wantLockedTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_wantAmt",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorLL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFeeFactorMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb69b24ad1bf02cb2a58f54625a2895b3cf722a96e864acfb9ac4c2869aea47f",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0xaba66801a23458F6Ff888c03E0453b747c1fA61B",
    "transactionIndex": 4,
    "gasUsed": "2566665",
    "logsBloom": "0x
    "blockHash": "0x7c0d5a8e98eebc905fdb3c6d4a4384ab7f473707f157610949fabfd12e745350",
    "transactionHash": "0xdb69b24ad1bf02cb2a58f54625a2895b3cf722a96e864acfb9ac4c2869aea47f",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9425342,
        "transactionHash": "0xdb69b24ad1bf02cb2a58f54625a2895b3cf722a96e864acfb9ac4c2869aea47f",
        "address": "0xaba66801a23458F6Ff888c03E0453b747c1fA61B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x7c0d5a8e98eebc905fdb3c6d4a4384ab7f473707f157610949fabfd12e745350"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9425342,
        "transactionHash": "0xdb69b24ad1bf02cb2a58f54625a2895b3cf722a96e864acfb9ac4c2869aea47f",
        "address": "0xaba66801a23458F6Ff888c03E0453b747c1fA61B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b",
          "0x0000000000000000000000002f868bc458f578958525b2780a0a3a713ee1270e"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x7c0d5a8e98eebc905fdb3c6d4a4384ab7f473707f157610949fabfd12e745350"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9425342,
        "transactionHash": "0xdb69b24ad1bf02cb2a58f54625a2895b3cf722a96e864acfb9ac4c2869aea47f",
        "address": "0xF143436dE21a03c50267dBf64F2B7D6d14dEeA0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000aba66801a23458f6ff888c03e0453b747c1fa61b",
          "0x000000000000000000000000e21a3a7fb4ff125a55ff75e93f70a49c491f0ca3"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0x7c0d5a8e98eebc905fdb3c6d4a4384ab7f473707f157610949fabfd12e745350"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9425342,
        "transactionHash": "0xdb69b24ad1bf02cb2a58f54625a2895b3cf722a96e864acfb9ac4c2869aea47f",
        "address": "0xF143436dE21a03c50267dBf64F2B7D6d14dEeA0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000aba66801a23458f6ff888c03e0453b747c1fa61b",
          "0x000000000000000000000000e21a3a7fb4ff125a55ff75e93f70a49c491f0ca3"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x7c0d5a8e98eebc905fdb3c6d4a4384ab7f473707f157610949fabfd12e745350"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9425342,
        "transactionHash": "0xdb69b24ad1bf02cb2a58f54625a2895b3cf722a96e864acfb9ac4c2869aea47f",
        "address": "0xaba6D7b5515f70402bFb2633B5446670B996c10b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000aba66801a23458f6ff888c03e0453b747c1fa61b",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x7c0d5a8e98eebc905fdb3c6d4a4384ab7f473707f157610949fabfd12e745350"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 9425342,
        "transactionHash": "0xdb69b24ad1bf02cb2a58f54625a2895b3cf722a96e864acfb9ac4c2869aea47f",
        "address": "0xaba6D7b5515f70402bFb2633B5446670B996c10b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000aba66801a23458f6ff888c03e0453b747c1fa61b",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 9,
        "blockHash": "0x7c0d5a8e98eebc905fdb3c6d4a4384ab7f473707f157610949fabfd12e745350"
      }
    ],
    "blockNumber": 9425342,
    "cumulativeGasUsed": "3021159",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2f868bC458f578958525B2780A0a3a713ee1270E",
    "0xE21a3A7fB4fF125A55ff75e93F70a49C491F0Ca3",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    1,
    "0xF143436dE21a03c50267dBf64F2B7D6d14dEeA0F",
    "0xaba6D7b5515f70402bFb2633B5446670B996c10b",
    [
      "0xaba6D7b5515f70402bFb2633B5446670B996c10b",
      "0xc778417e063141139fce010982780140aa0cd5ab"
    ]
  ],
  "solcInputHash": "42777ead1281ab388a02e232bbc05447",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultChefAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterchefAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnedAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_earnedToWmaticPath\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dgngAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToDgngPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken0Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken1Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToWmaticPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMaxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchefAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactorUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token0ToEarnedPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token1ToEarnedPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpanic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultChefAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultSharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantLockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/StrategyMasterChef.sol\":\"StrategyMasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interfaces/IUniPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniPair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9338cbba041543c256193483361d6fc6ff775b2a57eb8bebdfa2a32999acfdc4\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb8b608812f0f94c20ebd1825ea134d624eb0919c5eec4bc8a25a3232643aea3d\",\"license\":\"MIT\"},\"contracts/interfaces/IUniRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IUniRouter01.sol\\\";\\n\\ninterface IUniRouter02 is IUniRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7cab8b2d1f9bcc5c1944023b1755b3c73ffec7ed04a4801e565a58fc1eb7555e\",\"license\":\"MIT\"},\"contracts/vault/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/IUniPair.sol\\\";\\nimport \\\"../interfaces/IUniRouter02.sol\\\";\\n\\nabstract contract BaseStrategy is Ownable, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    address public wantAddress;\\n    address public token0Address;\\n    address public token1Address;\\n    address public earnedAddress;\\n\\n    address public uniRouterAddress;\\n    address public constant dgngAddress = 0x3a3Df212b7AA91Aa0402B9035b098891d276572B;\\n    address public constant withdrawFeeAddress = 0x4879712c5D1A98C0B88Fb700daFF5c65d12Fd729;\\n    address public constant feeAddress = 0x1cb757f1eB92F25A917CE9a92ED88c1aC0734334;\\n    address public vaultChefAddress;\\n    address public govAddress;\\n\\n    uint256 public lastEarnBlock = block.number;\\n    uint256 public sharesTotal = 0;\\n\\n    address public constant buyBackAddress = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public controllerFee = 50;\\n    uint256 public rewardRate = 0;\\n    uint256 public buyBackRate = 150;\\n    uint256 public constant feeMaxTotal = 1000;\\n    uint256 public constant feeMax = 10000; // 100 = 1%\\n\\n    uint256 public withdrawFeeFactor = 10000; // 0% withdraw fee\\n    uint256 public constant withdrawFeeFactorMax = 10000;\\n    uint256 public constant withdrawFeeFactorLL = 9900;\\n\\n    uint256 public slippageFactor = 950; // 5% default slippage tolerance\\n    uint256 public constant slippageFactorUL = 995;\\n\\n    address[] public earnedToWmaticPath; // for distributeFee, DNGN_WMATIC path\\n    address[] public earnedToDgngPath; // for buyBack, do we need it?\\n    address[] public earnedToToken0Path; //\\n    address[] public earnedToToken1Path;\\n    address[] public token0ToEarnedPath;\\n    address[] public token1ToEarnedPath;\\n\\n    event SetSettings(\\n        uint256 _controllerFee,\\n        uint256 _rewardRate,\\n        uint256 _buyBackRate,\\n        uint256 _withdrawFeeFactor,\\n        uint256 _slippageFactor,\\n        address _uniRouterAddress\\n    );\\n\\n    modifier onlyGov() {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        _;\\n    }\\n\\n    function _vaultDeposit(uint256 _amount) internal virtual;\\n\\n    function _vaultWithdraw(uint256 _amount) internal virtual;\\n\\n    function earn() external virtual;\\n\\n    function vaultSharesTotal() public view virtual returns (uint256);\\n\\n    function wantLockedTotal() public view virtual returns (uint256);\\n\\n    function _resetAllowances() internal virtual;\\n\\n    function _emergencyVaultWithdraw() internal virtual;\\n\\n    function deposit(address _userAddress, uint256 _wantAmt) external onlyOwner nonReentrant whenNotPaused returns (uint256) {\\n        // Call must happen before transfer\\n        uint256 wantLockedBefore = wantLockedTotal();\\n\\n        IERC20(wantAddress).safeTransferFrom(address(msg.sender), address(this), _wantAmt);\\n\\n        // Proper deposit amount for tokens with fees, or vaults with deposit fees\\n        uint256 sharesAdded = _farm();\\n        if (sharesTotal > 0) {\\n            sharesAdded = (sharesAdded * sharesTotal) / wantLockedBefore;\\n        }\\n        sharesTotal = sharesTotal + sharesAdded;\\n\\n        return sharesAdded;\\n    }\\n\\n    function _farm() internal returns (uint256) {\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\n        if (wantAmt == 0) return 0;\\n\\n        uint256 sharesBefore = vaultSharesTotal();\\n        _vaultDeposit(wantAmt);\\n        uint256 sharesAfter = vaultSharesTotal();\\n\\n        return sharesAfter - sharesBefore;\\n    }\\n\\n    function withdraw(address _userAddress, uint256 _wantAmt) external onlyOwner nonReentrant returns (uint256) {\\n        require(_wantAmt > 0, \\\"_wantAmt is 0\\\");\\n\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\n\\n        // Check if strategy has tokens from panic\\n        if (_wantAmt > wantAmt) {\\n            _vaultWithdraw(_wantAmt - wantAmt);\\n            wantAmt = IERC20(wantAddress).balanceOf(address(this));\\n        }\\n\\n        if (_wantAmt > wantAmt) {\\n            _wantAmt = wantAmt;\\n        }\\n\\n        if (_wantAmt > wantLockedTotal()) {\\n            _wantAmt = wantLockedTotal();\\n        }\\n\\n        uint256 sharesRemoved = (_wantAmt * sharesTotal) / wantLockedTotal();\\n        if (sharesRemoved > sharesTotal) {\\n            sharesRemoved = sharesTotal;\\n        }\\n        sharesTotal = sharesTotal - sharesRemoved;\\n\\n        // Withdraw fee\\n        uint256 withdrawFee = (_wantAmt * (withdrawFeeFactorMax - withdrawFeeFactor)) / withdrawFeeFactorMax;\\n        if (withdrawFee > 0) {\\n            IERC20(wantAddress).safeTransfer(withdrawFeeAddress, withdrawFee);\\n        }\\n\\n        _wantAmt = _wantAmt - withdrawFee;\\n\\n        IERC20(wantAddress).safeTransfer(vaultChefAddress, _wantAmt);\\n\\n        return sharesRemoved;\\n    }\\n\\n    // To pay for earn function\\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\\n        if (controllerFee > 0) {\\n            uint256 fee = (_earnedAmt * controllerFee) / feeMax;\\n            _safeSwapWmatic(fee, earnedToWmaticPath, feeAddress);\\n            _earnedAmt = _earnedAmt - fee;\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    function buyBack(uint256 _earnedAmt) internal virtual returns (uint256) {\\n        if (earnedAddress == dgngAddress) {\\n            return _earnedAmt;\\n        }\\n        if (buyBackRate > 0) {\\n            uint256 buyBackAmt = (_earnedAmt * buyBackRate) / feeMax;\\n            if (earnedAddress != dgngAddress) {\\n                _safeSwap(buyBackAmt, earnedToDgngPath, buyBackAddress);\\n            }\\n            _earnedAmt = _earnedAmt - buyBackAmt;\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    function resetAllowances() external onlyGov {\\n        _resetAllowances();\\n    }\\n\\n    function pause() external onlyGov {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyGov {\\n        _unpause();\\n        _resetAllowances();\\n    }\\n\\n    function panic() external onlyGov {\\n        _pause();\\n        _emergencyVaultWithdraw();\\n    }\\n\\n    function unpanic() external onlyGov {\\n        _unpause();\\n        _farm();\\n    }\\n\\n    function setGov(address _govAddress) external onlyGov {\\n        govAddress = _govAddress;\\n    }\\n\\n    function setSettings(\\n        uint256 _controllerFee,\\n        uint256 _rewardRate,\\n        uint256 _buyBackRate,\\n        uint256 _withdrawFeeFactor,\\n        uint256 _slippageFactor,\\n        address _uniRouterAddress\\n    ) external onlyGov {\\n        require(_controllerFee + _rewardRate + _buyBackRate <= feeMaxTotal, \\\"Max fee of 10%\\\");\\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL, \\\"_withdrawFeeFactor too low\\\");\\n        require(_withdrawFeeFactor <= withdrawFeeFactorMax, \\\"_withdrawFeeFactor too high\\\");\\n        require(_slippageFactor <= slippageFactorUL, \\\"_slippageFactor too high\\\");\\n        controllerFee = _controllerFee;\\n        rewardRate = _rewardRate;\\n        buyBackRate = _buyBackRate;\\n        withdrawFeeFactor = _withdrawFeeFactor;\\n        slippageFactor = _slippageFactor;\\n        uniRouterAddress = _uniRouterAddress;\\n\\n        emit SetSettings(_controllerFee, _rewardRate, _buyBackRate, _withdrawFeeFactor, _slippageFactor, _uniRouterAddress);\\n    }\\n\\n    function _safeSwap(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        address _to\\n    ) internal {\\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\\n        uint256 amountOut = amounts[amounts.length - 1];\\n\\n        IUniRouter02(uniRouterAddress).swapExactTokensForTokens(\\n            _amountIn,\\n            (amountOut * slippageFactor) / 1000,\\n            _path,\\n            _to,\\n            block.timestamp + 600\\n        );\\n    }\\n\\n    function _safeSwapWmatic(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        address _to\\n    ) internal {\\n        uint256[] memory amounts = IUniRouter02(uniRouterAddress).getAmountsOut(_amountIn, _path);\\n        uint256 amountOut = amounts[amounts.length - 1];\\n\\n        IUniRouter02(uniRouterAddress).swapExactTokensForETH(\\n            _amountIn,\\n            (amountOut * slippageFactor) / 1000,\\n            _path,\\n            _to,\\n            block.timestamp + 600\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd1fcc553b2551587af94e62a5e896caafd16a658d93bc9cfc21af72f37234df9\",\"license\":\"MIT\"},\"contracts/vault/StrategyMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * This strategy is for the single asset in MasterChef\\n */\\n\\nimport \\\"./interfaces/IMasterChef.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\n\\ncontract StrategyMasterChef is BaseStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    address public masterchefAddress;\\n    uint256 public pid; // MasterChef Pool id\\n\\n    constructor(\\n        address _vaultChefAddress,\\n        address _masterchefAddress,\\n        address _uniRouterAddress,\\n        uint256 _pid,\\n        address _wantAddress, // the token which we want to put in pool\\n        address _earnedAddress,\\n        address[] memory _earnedToWmaticPath\\n    ) {\\n        govAddress = msg.sender;\\n        vaultChefAddress = _vaultChefAddress;\\n        masterchefAddress = _masterchefAddress;\\n        uniRouterAddress = _uniRouterAddress;\\n\\n        wantAddress = _wantAddress;\\n\\n        pid = _pid;\\n        earnedAddress = _earnedAddress;\\n\\n        earnedToWmaticPath = _earnedToWmaticPath;\\n\\n        transferOwnership(vaultChefAddress);\\n        _resetAllowances();\\n    }\\n\\n    function earn() external override nonReentrant whenNotPaused onlyGov {\\n        // Harvest farm tokens\\n        _vaultHarvest();\\n\\n        // Converts farm tokens into want tokens\\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\\n\\n        if (earnedAmt > 0) {\\n            earnedAmt = distributeFees(earnedAmt);\\n            earnedAmt = buyBack(earnedAmt);\\n\\n            if (earnedAddress != wantAddress) {\\n                // Swap half earned to wantAddress\\n                address[] memory path;\\n                path[0] = earnedAddress;\\n                path[1] = wantAddress;\\n                _safeSwap(earnedAmt / 2, path, address(this));\\n            }\\n            lastEarnBlock = block.number;\\n            _farm();\\n        }\\n    }\\n\\n    function _vaultDeposit(uint256 _amount) internal override {\\n        IMasterchef(masterchefAddress).deposit(pid, _amount);\\n    }\\n\\n    function _vaultWithdraw(uint256 _amount) internal override {\\n        IMasterchef(masterchefAddress).withdraw(pid, _amount);\\n    }\\n\\n    function _vaultHarvest() internal {\\n        IMasterchef(masterchefAddress).withdraw(pid, 0);\\n    }\\n\\n    function vaultSharesTotal() public view override returns (uint256) {\\n        (uint256 amount, ) = IMasterchef(masterchefAddress).userInfo(pid, address(this));\\n        return amount;\\n    }\\n\\n    function wantLockedTotal() public view override returns (uint256) {\\n        return IERC20(wantAddress).balanceOf(address(this)) + vaultSharesTotal();\\n    }\\n\\n    function _resetAllowances() internal override {\\n        IERC20(wantAddress).safeApprove(masterchefAddress, uint256(0));\\n        IERC20(wantAddress).safeIncreaseAllowance(masterchefAddress, type(uint256).max);\\n\\n        IERC20(earnedAddress).safeApprove(uniRouterAddress, uint256(0));\\n        IERC20(earnedAddress).safeIncreaseAllowance(uniRouterAddress, type(uint256).max);\\n    }\\n\\n    function _emergencyVaultWithdraw() internal override {\\n        IMasterchef(masterchefAddress).emergencyWithdraw(pid);\\n    }\\n}\\n\",\"keccak256\":\"0x7acbd2c394d0fbe84ef7f10cf49f093942be7259b4248f43467f9d498f2acdfd\",\"license\":\"MIT\"},\"contracts/vault/interfaces/IMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMasterchef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function userInfo(uint256 _pid, address _address) external view returns (uint256, uint256);\\n\\n    function harvest(uint256 _pid, address _to) external;\\n}\\n\",\"keccak256\":\"0x62c5e33455b5cf43ff6927269abecfa8e225d40a1d507b26c555e8f7ab1cc036\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052436009556000600a556032600b556000600c556096600d55612710600e556103b6600f553480156200003557600080fd5b5060405162002f7a38038062002f7a8339810160408190526200005891620006ff565b6200006c6200006662000126565b6200012a565b600180556002805460088054336001600160a01b0319918216179091556007805482166001600160a01b038c8116919091179091556016805483168b83161790556006805483168a83161790556001600160a81b031990921661010087841602179092556017869055600580549092169084161790558051620000f790601090602084019062000666565b506007546200010f906001600160a01b03166200017a565b6200011962000200565b5050505050505062000b06565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200018462000126565b6001600160a01b031662000197620002be565b6001600160a01b031614620001c95760405162461bcd60e51b8152600401620001c09062000989565b60405180910390fd5b6001600160a01b038116620001f25760405162461bcd60e51b8152600401620001c090620008fd565b620001fd816200012a565b50565b60165460025462000231916001600160a01b03610100909204821691166000620002cd602090811b6200110617901c565b60165460025462000263916001600160a01b0361010090920482169116600019620003db602090811b6200123217901c565b6006546005546200028f916001600160a01b0391821691166000620002cd602090811b6200110617901c565b600654600554620002bc916001600160a01b039182169116600019620003db602090811b6200123217901c565b565b6000546001600160a01b031690565b8015806200035c5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9062000306903090869060040162000895565b60206040518083038186803b1580156200031f57600080fd5b505afa15801562000334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200035a91906200085e565b155b6200037b5760405162461bcd60e51b8152600401620001c09062000a3f565b620003d68363095ea7b360e01b84846040516024016200039d929190620008af565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200049816565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016200040e92919062000895565b60206040518083038186803b1580156200042757600080fd5b505afa1580156200043c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046291906200085e565b6200046e919062000a9c565b9050620004928463095ea7b360e01b85846040516024016200039d929190620008af565b50505050565b6000620004f4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200053460201b620012e4179092919060201c565b805190915015620003d657808060200190518101906200051591906200083c565b620003d65760405162461bcd60e51b8152600401620001c090620009f5565b60606200054584846000856200054f565b90505b9392505050565b606082471015620005745760405162461bcd60e51b8152600401620001c09062000943565b6200057f856200061e565b6200059e5760405162461bcd60e51b8152600401620001c090620009be565b600080866001600160a01b03168587604051620005bc919062000877565b60006040518083038185875af1925050503d8060008114620005fb576040519150601f19603f3d011682016040523d82523d6000602084013e62000600565b606091505b5090925090506200061382828662000628565b979650505050505050565b803b15155b919050565b606083156200063957508162000548565b8251156200064a5782518084602001fd5b8160405162461bcd60e51b8152600401620001c09190620008c8565b828054828255906000526020600020908101928215620006be579160200282015b82811115620006be57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000687565b50620006cc929150620006d0565b5090565b5b80821115620006cc5760008155600101620006d1565b80516001600160a01b03811681146200062357600080fd5b600080600080600080600060e0888a0312156200071a578283fd5b6200072588620006e7565b9650602062000736818a01620006e7565b96506200074660408a01620006e7565b9550606089015194506200075d60808a01620006e7565b93506200076d60a08a01620006e7565b60c08a01519093506001600160401b03808211156200078a578384fd5b818b0191508b601f8301126200079e578384fd5b815181811115620007b357620007b362000af0565b83810260405185828201018181108582111715620007d557620007d562000af0565b806040525080935082815285810193508585018f87848801011115620007f9578788fd5b8795505b8386101562000826576200081181620006e7565b855260019590950194938601938601620007fd565b5080965050505050505092959891949750929550565b6000602082840312156200084e578081fd5b8151801515811462000548578182fd5b60006020828403121562000870578081fd5b5051919050565b600082516200088b81846020870162000ac1565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152620008e981604085016020870162000ac1565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6000821982111562000abc57634e487b7160e01b81526011600452602481fd5b500190565b60005b8381101562000ade57818101518382015260200162000ac4565b83811115620004925750506000910152565b634e487b7160e01b600052604160045260246000fd5b6124648062000b166000396000f3fe608060405234801561001057600080fd5b50600436106103045760003560e01c8063783478ad116101a7578063b77050e7116100ee578063e7a0367911610097578063f3fef3a311610071578063f3fef3a314610509578063ffbd3b1f1461051c578063ffbe9f1e146103ff57610304565b8063e7a03679146104e6578063f1068454146104ee578063f2fde38b146104f657610304565b8063d389800f116100c8578063d389800f146104ce578063d7cb416f146104d6578063e7198474146104de57610304565b8063b77050e714610495578063c8e3d18b146104a8578063cfad57a2146104bb57610304565b8063866b2018116101505780638fefda061161012a5780638fefda061461047257806396e9aff81461047a578063b74cd2421461048d57610304565b8063866b20181461044f5780638d9ab2be146104575780638da5cb5b1461046a57610304565b80637ff36fbe116101815780637ff36fbe146104375780638456cb591461043f57806385f02dd61461044757610304565b8063783478ad1461041f578063784def8c146104275780637b0a47ee1461042f57610304565b8063412753581161026b5780635c975abb1161021457806368f54162116101ee57806368f5416214610407578063693a090b1461040f578063715018a61461041757610304565b80635c975abb146103e257806365a5e30b146103f757806367057b6c146103ff57610304565b806346008a071161024557806346008a07146103bf5780634700d305146103c757806347e7ef24146103cf57610304565b806341275358146103a757806342da4eb3146103af57806344a3955e146103b757610304565b8063260ab48c116102cd5780633b0e8f58116102a75780633b0e8f58146103845780633f4ba83a1461039757806340c34b581461039f57610304565b8063260ab48c1461035f5780633220d732146103725780633505b09f1461037a57610304565b80627a2ae31461030957806304c9d490146103325780630fa4e01e1461034757806314751d6a1461034f578063178a8d0714610357575b600080fd5b61031c610317366004611da4565b610524565b6040516103299190611ea6565b60405180910390f35b61033a61054e565b60405161032991906122b4565b61033a6105dd565b61031c6105e3565b61033a6105fb565b61031c61036d366004611da4565b610601565b61031c610611565b610382610620565b005b61031c610392366004611da4565b61065d565b61038261066d565b61031c61069f565b61031c6106ae565b61033a6106c6565b61033a610763565b61031c610769565b610382610778565b61033a6103dd366004611ca1565b6107b2565b6103ea6108b8565b6040516103299190611f11565b6103826108c1565b61033a6108fe565b61033a610904565b61031c61090a565b610382610919565b61031c610962565b61031c610968565b61033a610980565b61031c610986565b610382610995565b61033a6109c7565b61033a6109cd565b610382610465366004611df7565b6109d3565b61031c610b17565b61033a610b26565b61031c610488366004611da4565b610b2c565b61033a610b3c565b61031c6104a3366004611da4565b610b42565b61031c6104b6366004611da4565b610b52565b6103826104c9366004611c87565b610b62565b610382610bae565b61031c610da6565b61031c610db5565b61031c610dc4565b61033a610dd8565b610382610504366004611c87565b610dde565b61033a610517366004611ca1565b610e4c565b61033a611100565b6015818154811061053457600080fd5b6000918252602090912001546001600160a01b0316905081565b6016546017546040516393f1a40b60e01b815260009283926001600160a01b03909116916393f1a40b916105869130906004016122bd565b604080518083038186803b15801561059d57600080fd5b505afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190611dd4565b509150505b90565b60095481565b733a3df212b7aa91aa0402b9035b098891d276572b81565b600d5481565b6010818154811061053457600080fd5b6007546001600160a01b031681565b6008546001600160a01b031633146106535760405162461bcd60e51b815260040161064a9061203a565b60405180910390fd5b61065b6112fd565b565b6011818154811061053457600080fd5b6008546001600160a01b031633146106975760405162461bcd60e51b815260040161064a9061203a565b610653611381565b6016546001600160a01b031681565b731cb757f1eb92f25a917ce9a92ed88c1ac073433481565b60006106d061054e565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190610704903090600401611ea6565b60206040518083038186803b15801561071c57600080fd5b505afa158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190611dbc565b61075e9190612368565b905090565b600a5481565b6008546001600160a01b031681565b6008546001600160a01b031633146107a25760405162461bcd60e51b815260040161064a9061203a565b6107aa6113ef565b61065b61144a565b60006107bc6114a9565b6001600160a01b03166107cd610b17565b6001600160a01b0316146107f35760405162461bcd60e51b815260040161064a9061210c565b600260015414156108165760405162461bcd60e51b815260040161064a906121e9565b60026001556108236108b8565b156108405760405162461bcd60e51b815260040161064a906120d5565b600061084a6106c6565b60025490915061086a9061010090046001600160a01b03163330866114ad565b60006108746114ce565b600a549091501561089b5781600a548261088e91906123a0565b6108989190612380565b90505b80600a546108a99190612368565b600a5560018055949350505050565b60025460ff1690565b6008546001600160a01b031633146108eb5760405162461bcd60e51b815260040161064a9061203a565b6108f3611381565b6108fb6114ce565b50565b61271081565b600e5481565b6006546001600160a01b031681565b6109216114a9565b6001600160a01b0316610932610b17565b6001600160a01b0316146109585760405162461bcd60e51b815260040161064a9061210c565b61065b600061159b565b61dead81565b734879712c5d1a98c0b88fb700daff5c65d12fd72981565b600c5481565b6003546001600160a01b031681565b6008546001600160a01b031633146109bf5760405162461bcd60e51b815260040161064a9061203a565b61065b6113ef565b600b5481565b6126ac81565b6008546001600160a01b031633146109fd5760405162461bcd60e51b815260040161064a9061203a565b6103e884610a0b8789612368565b610a159190612368565b1115610a335760405162461bcd60e51b815260040161064a9061227d565b6126ac831015610a555760405162461bcd60e51b815260040161064a90611fbd565b612710831115610a775760405162461bcd60e51b815260040161064a90611f86565b6103e3821115610a995760405162461bcd60e51b815260040161064a90612058565b600b869055600c859055600d849055600e839055600f829055600680546001600160a01b0319166001600160a01b0383161790556040517f750807eeb548451f82ba7f92d0202705fb1886ac44b94fc763520e47bbe2ff4b90610b0790889088908890889088908890612337565b60405180910390a1505050505050565b6000546001600160a01b031690565b6103e881565b6013818154811061053457600080fd5b6103e381565b6014818154811061053457600080fd5b6012818154811061053457600080fd5b6008546001600160a01b03163314610b8c5760405162461bcd60e51b815260040161064a9061203a565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415610bd15760405162461bcd60e51b815260040161064a906121e9565b6002600155610bde6108b8565b15610bfb5760405162461bcd60e51b815260040161064a906120d5565b6008546001600160a01b03163314610c255760405162461bcd60e51b815260040161064a9061203a565b610c2d6115eb565b6005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610c5e903090600401611ea6565b60206040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae9190611dbc565b90508015610d9f57610cbf8161161f565b9050610cca816116d8565b60025460055491925061010090046001600160a01b03908116911614610d91576005546060805190916001600160a01b0316908290600090610d1c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260025482516101009091049091169082906001908110610d6257634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152610d8f610d88600284612380565b82306117ba565b505b43600955610d9d6114ce565b505b5060018055565b6004546001600160a01b031681565b6005546001600160a01b031681565b60025461010090046001600160a01b031681565b60175481565b610de66114a9565b6001600160a01b0316610df7610b17565b6001600160a01b031614610e1d5760405162461bcd60e51b815260040161064a9061210c565b6001600160a01b038116610e435760405162461bcd60e51b815260040161064a90611ff4565b6108fb8161159b565b6000610e566114a9565b6001600160a01b0316610e67610b17565b6001600160a01b031614610e8d5760405162461bcd60e51b815260040161064a9061210c565b60026001541415610eb05760405162461bcd60e51b815260040161064a906121e9565b600260015581610ed25760405162461bcd60e51b815260040161064a90612141565b6002546040516370a0823160e01b815260009161010090046001600160a01b0316906370a0823190610f08903090600401611ea6565b60206040518083038186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f589190611dbc565b905080831115610ffb57610f74610f6f82856123bf565b61193c565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190610fa8903090600401611ea6565b60206040518083038186803b158015610fc057600080fd5b505afa158015610fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff89190611dbc565b90505b80831115611007578092505b61100f6106c6565b8311156110215761101e6106c6565b92505b600061102b6106c6565b600a5461103890866123a0565b6110429190612380565b9050600a548111156110535750600a545b80600a5461106191906123bf565b600a55600e546000906127109061107890826123bf565b61108290876123a0565b61108c9190612380565b905080156110c4576002546110c49061010090046001600160a01b0316734879712c5d1a98c0b88fb700daff5c65d12fd729836119a4565b6110ce81866123bf565b6007546002549196506110f39161010090046001600160a01b039081169116876119a4565b5060018055949350505050565b600f5481565b80158061118e5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061113c9030908690600401611eba565b60206040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c9190611dbc565b155b6111aa5760405162461bcd60e51b815260040161064a90612220565b61122d8363095ea7b360e01b84846040516024016111c9929190611ef8565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526119c3565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401611263929190611eba565b60206040518083038186803b15801561127b57600080fd5b505afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b39190611dbc565b6112bd9190612368565b90506112de8463095ea7b360e01b85846040516024016111c9929190611ef8565b50505050565b60606112f38484600085611a52565b90505b9392505050565b601654600254611320916001600160a01b03610100909204821691166000611106565b601654600254611344916001600160a01b0361010090920482169116600019611232565b600654600554611362916001600160a01b0391821691166000611106565b60065460055461065b916001600160a01b039182169116600019611232565b6113896108b8565b6113a55760405162461bcd60e51b815260040161064a90611f4f565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6113d86114a9565b6040516113e59190611ea6565b60405180910390a1565b6113f76108b8565b156114145760405162461bcd60e51b815260040161064a906120d5565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113d86114a9565b601654601754604051632989754760e11b81526001600160a01b0390921691635312ea8e9161147b916004016122b4565b600060405180830381600087803b15801561149557600080fd5b505af11580156112de573d6000803e3d6000fd5b3390565b6112de846323b872dd60e01b8585856040516024016111c993929190611ed4565b6002546040516370a0823160e01b815260009182916101009091046001600160a01b0316906370a0823190611507903090600401611ea6565b60206040518083038186803b15801561151f57600080fd5b505afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190611dbc565b9050806115685760009150506105da565b600061157261054e565b905061157d82611b12565b600061158761054e565b905061159382826123bf565b935050505090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b601654601754604051630441a3e760e41b81526001600160a01b039092169163441a3e709161147b916000906004016122ed565b600b54600090156116d0576000612710600b548461163d91906123a0565b6116479190612380565b90506116c28160108054806020026020016040519081016040528092919081815260200182805480156116a357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611685575b5050505050731cb757f1eb92f25a917ce9a92ed88c1ac0734334611b45565b6116cc81846123bf565b9250505b50805b919050565b6005546000906001600160a01b0316733a3df212b7aa91aa0402b9035b098891d276572b14156117095750806116d3565b600d54156116d0576000612710600d548461172491906123a0565b61172e9190612380565b6005549091506001600160a01b0316733a3df212b7aa91aa0402b9035b098891d276572b146116c2576116c28160118054806020026020016040519081016040528092919081815260200182805480156117b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611793575b505050505061dead5b60065460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906117ed90879087906004016122d4565b60006040518083038186803b15801561180557600080fd5b505afa158015611819573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118419190810190611cca565b90506000816001835161185491906123bf565b8151811061187257634e487b7160e01b600052603260045260246000fd5b6020908102919091010151600654600f549192506001600160a01b0316906338ed17399087906103e8906118a690866123a0565b6118b09190612380565b87876118be42610258612368565b6040518663ffffffff1660e01b81526004016118de9594939291906122fb565b600060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119349190810190611cca565b505050505050565b601654601754604051630441a3e760e41b81526001600160a01b039092169163441a3e709161196f9185906004016122ed565b600060405180830381600087803b15801561198957600080fd5b505af115801561199d573d6000803e3d6000fd5b5050505050565b61122d8363a9059cbb60e01b84846040516024016111c9929190611ef8565b6000611a18826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112e49092919063ffffffff16565b80519091501561122d5780806020019051810190611a369190611d84565b61122d5760405162461bcd60e51b815260040161064a9061219f565b606082471015611a745760405162461bcd60e51b815260040161064a9061208f565b611a7d85611c31565b611a995760405162461bcd60e51b815260040161064a90612168565b600080866001600160a01b03168587604051611ab59190611e8a565b60006040518083038185875af1925050503d8060008114611af2576040519150601f19603f3d011682016040523d82523d6000602084013e611af7565b606091505b5091509150611b07828286611c37565b979650505050505050565b601654601754604051631c57762b60e31b81526001600160a01b039092169163e2bbb1589161196f9185906004016122ed565b60065460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611b7890879087906004016122d4565b60006040518083038186803b158015611b9057600080fd5b505afa158015611ba4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bcc9190810190611cca565b905060008160018351611bdf91906123bf565b81518110611bfd57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151600654600f549192506001600160a01b0316906318cbafe59087906103e8906118a690866123a0565b3b151590565b60608315611c465750816112f6565b825115611c565782518084602001fd5b8160405162461bcd60e51b815260040161064a9190611f1c565b80356001600160a01b03811681146116d357600080fd5b600060208284031215611c98578081fd5b6112f682611c70565b60008060408385031215611cb3578081fd5b611cbc83611c70565b946020939093013593505050565b60006020808385031215611cdc578182fd5b825167ffffffffffffffff80821115611cf3578384fd5b818501915085601f830112611d06578384fd5b815181811115611d1857611d18612418565b83810260405185828201018181108582111715611d3757611d37612418565b604052828152858101935084860182860187018a1015611d55578788fd5b8795505b83861015611d77578051855260019590950194938601938601611d59565b5098975050505050505050565b600060208284031215611d95578081fd5b815180151581146112f6578182fd5b600060208284031215611db5578081fd5b5035919050565b600060208284031215611dcd578081fd5b5051919050565b60008060408385031215611de6578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215611e0f578182fd5b8635955060208701359450604087013593506060870135925060808701359150611e3b60a08801611c70565b90509295509295509295565b6000815180845260208085019450808401835b83811015611e7f5781516001600160a01b031687529582019590820190600101611e5a565b509495945050505050565b60008251611e9c8184602087016123d6565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611f3b8160408501602087016123d6565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252601b908201527f5f7769746864726177466565466163746f7220746f6f20686967680000000000604082015260600190565b6020808252601a908201527f5f7769746864726177466565466163746f7220746f6f206c6f77000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526004908201526310b3b7bb60e11b604082015260600190565b60208082526018908201527f5f736c697070616765466163746f7220746f6f20686967680000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c05f77616e74416d74206973203609c1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252600e908201527f4d617820666565206f6620313025000000000000000000000000000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301526112f36040830184611e47565b918252602082015260400190565b600086825285602083015260a0604083015261231a60a0830186611e47565b6001600160a01b0394909416606083015250608001529392505050565b95865260208601949094526040850192909252606084015260808301526001600160a01b031660a082015260c00190565b6000821982111561237b5761237b612402565b500190565b60008261239b57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156123ba576123ba612402565b500290565b6000828210156123d1576123d1612402565b500390565b60005b838110156123f15781810151838201526020016123d9565b838111156112de5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203e4a232606aa97250e06ae3286ccf1e4866e78c4ed2a4f0664b10f27cffd8beb64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103045760003560e01c8063783478ad116101a7578063b77050e7116100ee578063e7a0367911610097578063f3fef3a311610071578063f3fef3a314610509578063ffbd3b1f1461051c578063ffbe9f1e146103ff57610304565b8063e7a03679146104e6578063f1068454146104ee578063f2fde38b146104f657610304565b8063d389800f116100c8578063d389800f146104ce578063d7cb416f146104d6578063e7198474146104de57610304565b8063b77050e714610495578063c8e3d18b146104a8578063cfad57a2146104bb57610304565b8063866b2018116101505780638fefda061161012a5780638fefda061461047257806396e9aff81461047a578063b74cd2421461048d57610304565b8063866b20181461044f5780638d9ab2be146104575780638da5cb5b1461046a57610304565b80637ff36fbe116101815780637ff36fbe146104375780638456cb591461043f57806385f02dd61461044757610304565b8063783478ad1461041f578063784def8c146104275780637b0a47ee1461042f57610304565b8063412753581161026b5780635c975abb1161021457806368f54162116101ee57806368f5416214610407578063693a090b1461040f578063715018a61461041757610304565b80635c975abb146103e257806365a5e30b146103f757806367057b6c146103ff57610304565b806346008a071161024557806346008a07146103bf5780634700d305146103c757806347e7ef24146103cf57610304565b806341275358146103a757806342da4eb3146103af57806344a3955e146103b757610304565b8063260ab48c116102cd5780633b0e8f58116102a75780633b0e8f58146103845780633f4ba83a1461039757806340c34b581461039f57610304565b8063260ab48c1461035f5780633220d732146103725780633505b09f1461037a57610304565b80627a2ae31461030957806304c9d490146103325780630fa4e01e1461034757806314751d6a1461034f578063178a8d0714610357575b600080fd5b61031c610317366004611da4565b610524565b6040516103299190611ea6565b60405180910390f35b61033a61054e565b60405161032991906122b4565b61033a6105dd565b61031c6105e3565b61033a6105fb565b61031c61036d366004611da4565b610601565b61031c610611565b610382610620565b005b61031c610392366004611da4565b61065d565b61038261066d565b61031c61069f565b61031c6106ae565b61033a6106c6565b61033a610763565b61031c610769565b610382610778565b61033a6103dd366004611ca1565b6107b2565b6103ea6108b8565b6040516103299190611f11565b6103826108c1565b61033a6108fe565b61033a610904565b61031c61090a565b610382610919565b61031c610962565b61031c610968565b61033a610980565b61031c610986565b610382610995565b61033a6109c7565b61033a6109cd565b610382610465366004611df7565b6109d3565b61031c610b17565b61033a610b26565b61031c610488366004611da4565b610b2c565b61033a610b3c565b61031c6104a3366004611da4565b610b42565b61031c6104b6366004611da4565b610b52565b6103826104c9366004611c87565b610b62565b610382610bae565b61031c610da6565b61031c610db5565b61031c610dc4565b61033a610dd8565b610382610504366004611c87565b610dde565b61033a610517366004611ca1565b610e4c565b61033a611100565b6015818154811061053457600080fd5b6000918252602090912001546001600160a01b0316905081565b6016546017546040516393f1a40b60e01b815260009283926001600160a01b03909116916393f1a40b916105869130906004016122bd565b604080518083038186803b15801561059d57600080fd5b505afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190611dd4565b509150505b90565b60095481565b733a3df212b7aa91aa0402b9035b098891d276572b81565b600d5481565b6010818154811061053457600080fd5b6007546001600160a01b031681565b6008546001600160a01b031633146106535760405162461bcd60e51b815260040161064a9061203a565b60405180910390fd5b61065b6112fd565b565b6011818154811061053457600080fd5b6008546001600160a01b031633146106975760405162461bcd60e51b815260040161064a9061203a565b610653611381565b6016546001600160a01b031681565b731cb757f1eb92f25a917ce9a92ed88c1ac073433481565b60006106d061054e565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190610704903090600401611ea6565b60206040518083038186803b15801561071c57600080fd5b505afa158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190611dbc565b61075e9190612368565b905090565b600a5481565b6008546001600160a01b031681565b6008546001600160a01b031633146107a25760405162461bcd60e51b815260040161064a9061203a565b6107aa6113ef565b61065b61144a565b60006107bc6114a9565b6001600160a01b03166107cd610b17565b6001600160a01b0316146107f35760405162461bcd60e51b815260040161064a9061210c565b600260015414156108165760405162461bcd60e51b815260040161064a906121e9565b60026001556108236108b8565b156108405760405162461bcd60e51b815260040161064a906120d5565b600061084a6106c6565b60025490915061086a9061010090046001600160a01b03163330866114ad565b60006108746114ce565b600a549091501561089b5781600a548261088e91906123a0565b6108989190612380565b90505b80600a546108a99190612368565b600a5560018055949350505050565b60025460ff1690565b6008546001600160a01b031633146108eb5760405162461bcd60e51b815260040161064a9061203a565b6108f3611381565b6108fb6114ce565b50565b61271081565b600e5481565b6006546001600160a01b031681565b6109216114a9565b6001600160a01b0316610932610b17565b6001600160a01b0316146109585760405162461bcd60e51b815260040161064a9061210c565b61065b600061159b565b61dead81565b734879712c5d1a98c0b88fb700daff5c65d12fd72981565b600c5481565b6003546001600160a01b031681565b6008546001600160a01b031633146109bf5760405162461bcd60e51b815260040161064a9061203a565b61065b6113ef565b600b5481565b6126ac81565b6008546001600160a01b031633146109fd5760405162461bcd60e51b815260040161064a9061203a565b6103e884610a0b8789612368565b610a159190612368565b1115610a335760405162461bcd60e51b815260040161064a9061227d565b6126ac831015610a555760405162461bcd60e51b815260040161064a90611fbd565b612710831115610a775760405162461bcd60e51b815260040161064a90611f86565b6103e3821115610a995760405162461bcd60e51b815260040161064a90612058565b600b869055600c859055600d849055600e839055600f829055600680546001600160a01b0319166001600160a01b0383161790556040517f750807eeb548451f82ba7f92d0202705fb1886ac44b94fc763520e47bbe2ff4b90610b0790889088908890889088908890612337565b60405180910390a1505050505050565b6000546001600160a01b031690565b6103e881565b6013818154811061053457600080fd5b6103e381565b6014818154811061053457600080fd5b6012818154811061053457600080fd5b6008546001600160a01b03163314610b8c5760405162461bcd60e51b815260040161064a9061203a565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415610bd15760405162461bcd60e51b815260040161064a906121e9565b6002600155610bde6108b8565b15610bfb5760405162461bcd60e51b815260040161064a906120d5565b6008546001600160a01b03163314610c255760405162461bcd60e51b815260040161064a9061203a565b610c2d6115eb565b6005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610c5e903090600401611ea6565b60206040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae9190611dbc565b90508015610d9f57610cbf8161161f565b9050610cca816116d8565b60025460055491925061010090046001600160a01b03908116911614610d91576005546060805190916001600160a01b0316908290600090610d1c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260025482516101009091049091169082906001908110610d6257634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152610d8f610d88600284612380565b82306117ba565b505b43600955610d9d6114ce565b505b5060018055565b6004546001600160a01b031681565b6005546001600160a01b031681565b60025461010090046001600160a01b031681565b60175481565b610de66114a9565b6001600160a01b0316610df7610b17565b6001600160a01b031614610e1d5760405162461bcd60e51b815260040161064a9061210c565b6001600160a01b038116610e435760405162461bcd60e51b815260040161064a90611ff4565b6108fb8161159b565b6000610e566114a9565b6001600160a01b0316610e67610b17565b6001600160a01b031614610e8d5760405162461bcd60e51b815260040161064a9061210c565b60026001541415610eb05760405162461bcd60e51b815260040161064a906121e9565b600260015581610ed25760405162461bcd60e51b815260040161064a90612141565b6002546040516370a0823160e01b815260009161010090046001600160a01b0316906370a0823190610f08903090600401611ea6565b60206040518083038186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f589190611dbc565b905080831115610ffb57610f74610f6f82856123bf565b61193c565b6002546040516370a0823160e01b81526101009091046001600160a01b0316906370a0823190610fa8903090600401611ea6565b60206040518083038186803b158015610fc057600080fd5b505afa158015610fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff89190611dbc565b90505b80831115611007578092505b61100f6106c6565b8311156110215761101e6106c6565b92505b600061102b6106c6565b600a5461103890866123a0565b6110429190612380565b9050600a548111156110535750600a545b80600a5461106191906123bf565b600a55600e546000906127109061107890826123bf565b61108290876123a0565b61108c9190612380565b905080156110c4576002546110c49061010090046001600160a01b0316734879712c5d1a98c0b88fb700daff5c65d12fd729836119a4565b6110ce81866123bf565b6007546002549196506110f39161010090046001600160a01b039081169116876119a4565b5060018055949350505050565b600f5481565b80158061118e5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061113c9030908690600401611eba565b60206040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c9190611dbc565b155b6111aa5760405162461bcd60e51b815260040161064a90612220565b61122d8363095ea7b360e01b84846040516024016111c9929190611ef8565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526119c3565b505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401611263929190611eba565b60206040518083038186803b15801561127b57600080fd5b505afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b39190611dbc565b6112bd9190612368565b90506112de8463095ea7b360e01b85846040516024016111c9929190611ef8565b50505050565b60606112f38484600085611a52565b90505b9392505050565b601654600254611320916001600160a01b03610100909204821691166000611106565b601654600254611344916001600160a01b0361010090920482169116600019611232565b600654600554611362916001600160a01b0391821691166000611106565b60065460055461065b916001600160a01b039182169116600019611232565b6113896108b8565b6113a55760405162461bcd60e51b815260040161064a90611f4f565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6113d86114a9565b6040516113e59190611ea6565b60405180910390a1565b6113f76108b8565b156114145760405162461bcd60e51b815260040161064a906120d5565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113d86114a9565b601654601754604051632989754760e11b81526001600160a01b0390921691635312ea8e9161147b916004016122b4565b600060405180830381600087803b15801561149557600080fd5b505af11580156112de573d6000803e3d6000fd5b3390565b6112de846323b872dd60e01b8585856040516024016111c993929190611ed4565b6002546040516370a0823160e01b815260009182916101009091046001600160a01b0316906370a0823190611507903090600401611ea6565b60206040518083038186803b15801561151f57600080fd5b505afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190611dbc565b9050806115685760009150506105da565b600061157261054e565b905061157d82611b12565b600061158761054e565b905061159382826123bf565b935050505090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b601654601754604051630441a3e760e41b81526001600160a01b039092169163441a3e709161147b916000906004016122ed565b600b54600090156116d0576000612710600b548461163d91906123a0565b6116479190612380565b90506116c28160108054806020026020016040519081016040528092919081815260200182805480156116a357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611685575b5050505050731cb757f1eb92f25a917ce9a92ed88c1ac0734334611b45565b6116cc81846123bf565b9250505b50805b919050565b6005546000906001600160a01b0316733a3df212b7aa91aa0402b9035b098891d276572b14156117095750806116d3565b600d54156116d0576000612710600d548461172491906123a0565b61172e9190612380565b6005549091506001600160a01b0316733a3df212b7aa91aa0402b9035b098891d276572b146116c2576116c28160118054806020026020016040519081016040528092919081815260200182805480156117b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611793575b505050505061dead5b60065460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906117ed90879087906004016122d4565b60006040518083038186803b15801561180557600080fd5b505afa158015611819573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118419190810190611cca565b90506000816001835161185491906123bf565b8151811061187257634e487b7160e01b600052603260045260246000fd5b6020908102919091010151600654600f549192506001600160a01b0316906338ed17399087906103e8906118a690866123a0565b6118b09190612380565b87876118be42610258612368565b6040518663ffffffff1660e01b81526004016118de9594939291906122fb565b600060405180830381600087803b1580156118f857600080fd5b505af115801561190c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119349190810190611cca565b505050505050565b601654601754604051630441a3e760e41b81526001600160a01b039092169163441a3e709161196f9185906004016122ed565b600060405180830381600087803b15801561198957600080fd5b505af115801561199d573d6000803e3d6000fd5b5050505050565b61122d8363a9059cbb60e01b84846040516024016111c9929190611ef8565b6000611a18826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112e49092919063ffffffff16565b80519091501561122d5780806020019051810190611a369190611d84565b61122d5760405162461bcd60e51b815260040161064a9061219f565b606082471015611a745760405162461bcd60e51b815260040161064a9061208f565b611a7d85611c31565b611a995760405162461bcd60e51b815260040161064a90612168565b600080866001600160a01b03168587604051611ab59190611e8a565b60006040518083038185875af1925050503d8060008114611af2576040519150601f19603f3d011682016040523d82523d6000602084013e611af7565b606091505b5091509150611b07828286611c37565b979650505050505050565b601654601754604051631c57762b60e31b81526001600160a01b039092169163e2bbb1589161196f9185906004016122ed565b60065460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f90611b7890879087906004016122d4565b60006040518083038186803b158015611b9057600080fd5b505afa158015611ba4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bcc9190810190611cca565b905060008160018351611bdf91906123bf565b81518110611bfd57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151600654600f549192506001600160a01b0316906318cbafe59087906103e8906118a690866123a0565b3b151590565b60608315611c465750816112f6565b825115611c565782518084602001fd5b8160405162461bcd60e51b815260040161064a9190611f1c565b80356001600160a01b03811681146116d357600080fd5b600060208284031215611c98578081fd5b6112f682611c70565b60008060408385031215611cb3578081fd5b611cbc83611c70565b946020939093013593505050565b60006020808385031215611cdc578182fd5b825167ffffffffffffffff80821115611cf3578384fd5b818501915085601f830112611d06578384fd5b815181811115611d1857611d18612418565b83810260405185828201018181108582111715611d3757611d37612418565b604052828152858101935084860182860187018a1015611d55578788fd5b8795505b83861015611d77578051855260019590950194938601938601611d59565b5098975050505050505050565b600060208284031215611d95578081fd5b815180151581146112f6578182fd5b600060208284031215611db5578081fd5b5035919050565b600060208284031215611dcd578081fd5b5051919050565b60008060408385031215611de6578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215611e0f578182fd5b8635955060208701359450604087013593506060870135925060808701359150611e3b60a08801611c70565b90509295509295509295565b6000815180845260208085019450808401835b83811015611e7f5781516001600160a01b031687529582019590820190600101611e5a565b509495945050505050565b60008251611e9c8184602087016123d6565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611f3b8160408501602087016123d6565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252601b908201527f5f7769746864726177466565466163746f7220746f6f20686967680000000000604082015260600190565b6020808252601a908201527f5f7769746864726177466565466163746f7220746f6f206c6f77000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526004908201526310b3b7bb60e11b604082015260600190565b60208082526018908201527f5f736c697070616765466163746f7220746f6f20686967680000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c05f77616e74416d74206973203609c1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252600e908201527f4d617820666565206f6620313025000000000000000000000000000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301526112f36040830184611e47565b918252602082015260400190565b600086825285602083015260a0604083015261231a60a0830186611e47565b6001600160a01b0394909416606083015250608001529392505050565b95865260208601949094526040850192909252606084015260808301526001600160a01b031660a082015260c00190565b6000821982111561237b5761237b612402565b500190565b60008261239b57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156123ba576123ba612402565b500290565b6000828210156123d1576123d1612402565b500390565b60005b838110156123f15781810151838201526020016123d9565b838111156112de5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203e4a232606aa97250e06ae3286ccf1e4866e78c4ed2a4f0664b10f27cffd8beb64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 206,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 121,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 8255,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "wantAddress",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8257,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "token0Address",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8259,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "token1Address",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8261,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "earnedAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8263,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "uniRouterAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8274,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "vaultChefAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8276,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "govAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8280,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "lastEarnBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 8283,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 8289,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "controllerFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8292,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "rewardRate",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8295,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "buyBackRate",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 8304,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "withdrawFeeFactor",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8313,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "slippageFactor",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 8319,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "earnedToWmaticPath",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8322,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "earnedToDgngPath",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8325,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "earnedToToken0Path",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8328,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "earnedToToken1Path",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8331,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "token0ToEarnedPath",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8334,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "token1ToEarnedPath",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9300,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "masterchefAddress",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 9302,
        "contract": "contracts/vault/StrategyMasterChef.sol:StrategyMasterChef",
        "label": "pid",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}